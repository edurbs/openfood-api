{
    "sourceFile": "src/test/java/com/edurbs/openfood/api/controller/CidadeControllerMockTest.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1670361616120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1670361616120,
            "name": "Commit-0",
            "content": "package com.edurbs.openfood.api.controller;\r\n\r\nimport static org.mockito.Mockito.doNothing;\r\nimport static org.mockito.Mockito.doThrow;\r\nimport static org.mockito.Mockito.when;\r\n\r\nimport java.util.ArrayList;\r\nimport java.util.List;\r\n\r\nimport org.hamcrest.CoreMatchers;\r\nimport org.hamcrest.Matchers;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.mockito.BDDMockito;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;\r\nimport org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;\r\nimport org.springframework.boot.test.mock.mockito.MockBean;\r\nimport org.springframework.http.MediaType;\r\nimport org.springframework.test.web.servlet.MockMvc;\r\nimport org.springframework.test.web.servlet.request.MockMvcRequestBuilders;\r\nimport org.springframework.test.web.servlet.result.MockMvcResultHandlers;\r\nimport org.springframework.test.web.servlet.result.MockMvcResultMatchers;\r\n\r\nimport com.edurbs.openfood.domain.exception.CidadeNaoEncontradaException;\r\nimport com.edurbs.openfood.domain.model.Cidade;\r\nimport com.edurbs.openfood.domain.model.Estado;\r\nimport com.edurbs.openfood.domain.service.CadastroCidadeService;\r\n\r\nimport uk.co.jemos.podam.api.PodamFactory;\r\nimport uk.co.jemos.podam.api.PodamFactoryImpl;\r\n\r\n\r\n\r\n@WebMvcTest(controllers = CidadeController.class)\r\n@AutoConfigureMockMvc(addFilters = false)\r\npublic class CidadeControllerMockTest {\r\n\r\n    private static final Long CIDADE_NAO_EXISTENTE = 10000L;\r\n\r\n    @Autowired\r\n    private MockMvc mockMvc;\r\n\r\n    @MockBean\r\n    private CadastroCidadeService cadastroCidadeService;\r\n\r\n    // @Autowired\r\n    // private ObjectMapper objectMapper;\r\n\r\n\r\n    private Cidade cidade1;\r\n    private Cidade cidade2;\r\n    private Cidade cidade3;\r\n    private List<Cidade> cidades = new ArrayList<>();\r\n    private Estado estado;\r\n\r\n\r\n\r\n    @BeforeEach\r\n    public void init(){\r\n\r\n        //Faker faker = new Faker(new Locale(\"pt_BR\"));\r\n        //new Locale.Builder().setLanguage(\"pt\").setVariant(\"BR\").build();\r\n\r\n        // estado = Estado.builder().nome(faker.address().state()).id(1L).build();\r\n        // cidade1 = Cidade.builder().nome(faker.address().cityName()).estado(estado).id(1L).build();\r\n        // cidade2 = Cidade.builder().nome(faker.address().cityName()).estado(estado).id(2L).build();\r\n        // cidade3 = Cidade.builder().nome(faker.address().cityName()).estado(estado).id(3L).build();\r\n\r\n        PodamFactory podamFactory = new PodamFactoryImpl();\r\n\r\n        \r\n        // estado = podamFactory.manufacturePojo(Estado.class);\r\n        cidade1 = podamFactory.manufacturePojo(Cidade.class);\r\n        cidade2 = podamFactory.manufacturePojo(Cidade.class);\r\n        cidade3 = podamFactory.manufacturePojo(Cidade.class);\r\n        \r\n        \r\n        cidades.add(cidade1);\r\n        cidades.add(cidade2);\r\n        cidades.add(cidade3);\r\n\r\n\r\n\r\n    }\r\n\r\n    @Test\r\n    public void shouldReturnCidade1_whenGetCidade1() throws Exception {\r\n        Long cidadeId = cidade1.getId();\r\n        when(cadastroCidadeService.find(cidadeId)).thenReturn(cidade1);        \r\n        \r\n        mockMvc.perform(\r\n                MockMvcRequestBuilders.get(\"/cidades/\"+cidadeId)\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .accept(MediaType.APPLICATION_JSON)\r\n                )\r\n                //.content(objectMapper.writeValueAsString(cidade))\r\n                .andExpectAll(\r\n                        MockMvcResultMatchers.status().isOk(),\r\n                        MockMvcResultMatchers.jsonPath(\"$.nome\", Matchers.is(cidade1.getNome())),\r\n                        MockMvcResultMatchers.jsonPath(\"$.id\", Matchers.is(cidade1.getId()), Long.class),\r\n                        MockMvcResultMatchers.jsonPath(\"$.estado.id\", Matchers.is(cidade1.getEstado().getId()), Long.class),\r\n                        MockMvcResultMatchers.jsonPath(\"$.estado.nome\", Matchers.is(cidade1.getEstado().getNome()))\r\n                )\r\n                .andDo(MockMvcResultHandlers.print());\r\n\r\n    }\r\n\r\n    @Test\r\n    void shouldReturnList_whenGetAllCidade() throws Exception {\r\n        when(cadastroCidadeService.listar()).thenReturn(cidades);\r\n\r\n        mockMvc.perform(\r\n                MockMvcRequestBuilders.get(\"/cidades\")\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .accept(MediaType.APPLICATION_JSON)\r\n                )    \r\n                .andExpectAll(\r\n                        MockMvcResultMatchers.status().isOk(),\r\n                        MockMvcResultMatchers.jsonPath(\"$.size()\", CoreMatchers.is(cidades.size()))\r\n                )\r\n                .andDo(MockMvcResultHandlers.print());\r\n    }\r\n\r\n    @Test\r\n    void shoudlDelete_whenDeleteCidade1() throws Exception {\r\n        doNothing().when(cadastroCidadeService).remover(cidade1.getId());\r\n\r\n        mockMvc.perform(\r\n                MockMvcRequestBuilders\r\n                        .delete(\"/cidades/{id}\", cidade1.getId())\r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .accept(MediaType.APPLICATION_JSON)                               \r\n                )\r\n                .andExpectAll(\r\n                        MockMvcResultMatchers.status().isNoContent()                        \r\n                );\r\n\r\n    }\r\n\r\n    @Test\r\n    void shouldReturn404_whenDeleteCidadeNonExistent() throws Exception {\r\n        doThrow(new CidadeNaoEncontradaException(CIDADE_NAO_EXISTENTE)).when(cadastroCidadeService).remover(CIDADE_NAO_EXISTENTE);\r\n\r\n        mockMvc.perform(\r\n                MockMvcRequestBuilders\r\n                        .delete(\"/cidades/{id}\", CIDADE_NAO_EXISTENTE)   \r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .accept(MediaType.APPLICATION_JSON)\r\n                )\r\n                .andExpectAll(\r\n                    MockMvcResultMatchers.status().isNotFound()\r\n                );\r\n    }\r\n\r\n    @Test\r\n    void BDDway_shouldReturn404_whenDeleteCidadeNonExistent() throws Exception {\r\n        BDDMockito\r\n            .willThrow(new CidadeNaoEncontradaException(CIDADE_NAO_EXISTENTE))\r\n            .given(cadastroCidadeService).remover(CIDADE_NAO_EXISTENTE);\r\n\r\n        mockMvc.perform(\r\n                MockMvcRequestBuilders\r\n                        .delete(\"/cidades/{id}\", CIDADE_NAO_EXISTENTE)   \r\n                        .contentType(MediaType.APPLICATION_JSON)\r\n                        .accept(MediaType.APPLICATION_JSON)\r\n                )\r\n                .andExpectAll(\r\n                    MockMvcResultMatchers.status().isNotFound()\r\n                );\r\n    }\r\n\r\n}\r\n"
        }
    ]
}