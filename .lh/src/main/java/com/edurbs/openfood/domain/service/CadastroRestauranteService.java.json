{
    "sourceFile": "src/main/java/com/edurbs/openfood/domain/service/CadastroRestauranteService.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1670361616116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1670361616116,
            "name": "Commit-0",
            "content": "package com.edurbs.openfood.domain.service;\r\n\r\nimport java.util.List;\r\n\r\nimport javax.transaction.Transactional;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.dao.DataIntegrityViolationException;\r\nimport org.springframework.dao.EmptyResultDataAccessException;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport com.edurbs.openfood.domain.exception.EntidadeEmUsoException;\r\nimport com.edurbs.openfood.domain.exception.RestauranteNaoEncontradoException;\r\nimport com.edurbs.openfood.domain.model.Cidade;\r\nimport com.edurbs.openfood.domain.model.Cozinha;\r\nimport com.edurbs.openfood.domain.model.Restaurante;\r\nimport com.edurbs.openfood.domain.repository.RestauranteRepository;\r\n\r\n@Service\r\npublic class CadastroRestauranteService {\r\n\r\n    private static final String RESTAURANTE_EM_USO = \"Restaurante código %d não pode ser removido, pois está em uso\";\r\n\r\n    @Autowired\r\n    private RestauranteRepository restauranteRepository;\r\n\r\n    @Autowired\r\n    private CadastroCozinhaService cadastroCozinhaService;\r\n\r\n    @Autowired\r\n    private CadastroCidadeService cadastroCidadeService;\r\n\r\n    @Autowired\r\n    private CadastroFormaPagamentoService cadastroFormaPagamentoService;\r\n\r\n    @Autowired\r\n    private CadastroUsuarioService cadastroUsuarioService;\r\n\r\n    @Transactional\r\n    public Restaurante salvar(Restaurante restaurante) {\r\n        Long cozinhaId = restaurante.getCozinha().getId();\r\n        Long cidadeId = restaurante.getEndereco().getCidade().getId();\r\n        \r\n        Cozinha cozinha = cadastroCozinhaService.buscar(cozinhaId);\r\n        Cidade cidade = cadastroCidadeService.find(cidadeId);\r\n        \r\n        restaurante.setCozinha(cozinha);\r\n        restaurante.getEndereco().setCidade(cidade);\r\n\r\n        return restauranteRepository.save(restaurante);\r\n    }\r\n\r\n    @Transactional\r\n    public void remover(Long id) {\r\n        try {\r\n            restauranteRepository.deleteById(id);\r\n        } catch (DataIntegrityViolationException e) {\r\n            throw new EntidadeEmUsoException(\r\n                    String.format(RESTAURANTE_EM_USO, id));\r\n        } catch (EmptyResultDataAccessException e) {\r\n            throw new RestauranteNaoEncontradoException(id);\r\n\r\n        }\r\n    }\r\n\r\n    public List<Restaurante> listar() {\r\n        return restauranteRepository.findAll();\r\n        //return restauranteRepository.consultaPorNome(\"a\", 1L);\r\n        //return restauranteRepository.consultaPorNomeViaXML(\"ar\", 1L);\r\n        //return restauranteRepository.consultaPorNomeViaSDJCustomizado(\"a\", BigDecimal.valueOf(1L), BigDecimal.valueOf(10L));\r\n    }\r\n\r\n\r\n    public Restaurante buscar(Long restauranteId) {\r\n        return restauranteRepository.findById(restauranteId)\r\n                .orElseThrow(() -> new RestauranteNaoEncontradoException(restauranteId));\r\n    }\r\n\r\n    @Transactional\r\n    public void ativar(Long restauranteId){\r\n        Restaurante restauranteAtual = buscar(restauranteId);\r\n        restauranteAtual.ativar();\r\n        // não precisa salvar porque está sendo gerenciado pelo JPA\r\n    }\r\n\r\n    @Transactional\r\n    public void desativar(Long restauranteId){\r\n        Restaurante restauranteAtual = buscar(restauranteId);\r\n        restauranteAtual.desativar();\r\n    }\r\n\r\n    @Transactional\r\n    public void ativar(List<Long> restauranteIds) {\r\n        restauranteIds.forEach(this::ativar);\r\n    }\r\n\r\n    @Transactional\r\n    public void desativar(List<Long> restauranteIds) {\r\n        restauranteIds.forEach(this::desativar);\r\n    }\r\n\r\n    public List<Restaurante> listarAtivosComFreteGratis() {\r\n\r\n        return restauranteRepository.listarAtivosComFreteGratis();\r\n        \r\n    }\r\n\r\n    public Restaurante buscaPrimeiro() {\r\n        var result = restauranteRepository.buscarPrimeiro();\r\n        // if(result.isPresent()){\r\n        //     return result.get();\r\n        // }\r\n        // return null;\r\n\r\n        return result.orElseThrow(() -> new RestauranteNaoEncontradoException(\"Não há restaurantes cadastrados.\"));\r\n    }\r\n\r\n    @Transactional\r\n    public void associarFormaPagamento(Long restauranteId, Long formaPagamentoId){\r\n        var restaurante = buscar(restauranteId);\r\n        var formaPagamento = cadastroFormaPagamentoService.buscar(formaPagamentoId);\r\n        restaurante.associarFormaPagamento(formaPagamento);\r\n        \r\n        \r\n    }\r\n\r\n    @Transactional\r\n    public void desassociarFormaPagamento(Long restauranteId, Long formaPagamentoId){\r\n        var restaurante = buscar(restauranteId);\r\n        var formaPagamento = cadastroFormaPagamentoService.buscar(formaPagamentoId);\r\n        restaurante.desassociarFormaPagamento(formaPagamento);\r\n     \r\n    }\r\n\r\n    @Transactional\r\n    public void associarResponsavel(Long restauranteId, Long usuarioId) {\r\n        var usuario = cadastroUsuarioService.buscar(usuarioId);\r\n        var restaurante = buscar(restauranteId);\r\n        restaurante.associarResponsavel(usuario);\r\n    }\r\n\r\n    @Transactional\r\n    public void desassociarResponsavel(Long restauranteId, Long usuarioId) {\r\n        var usuario = cadastroUsuarioService.buscar(usuarioId);\r\n        var restaurante = buscar(restauranteId);\r\n        restaurante.desassociarResponsavel(usuario);\r\n    }\r\n\r\n    @Transactional\r\n    public void fechar(Long restauranteId) {\r\n        Restaurante restaurante = buscar(restauranteId);\r\n        restaurante.fechar();\r\n        \r\n    }\r\n\r\n    @Transactional\r\n    public void abrir(Long restauranteId) {\r\n        Restaurante restaurante = buscar(restauranteId);\r\n        restaurante.abrir();\r\n    }\r\n}\r\n"
        }
    ]
}