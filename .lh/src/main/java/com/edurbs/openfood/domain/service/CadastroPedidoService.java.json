{
    "sourceFile": "src/main/java/com/edurbs/openfood/domain/service/CadastroPedidoService.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1670361616115,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1670361616115,
            "name": "Commit-0",
            "content": "package com.edurbs.openfood.domain.service;\r\n\r\nimport java.util.List;\r\nimport java.util.Set;\r\n\r\nimport javax.transaction.Transactional;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport com.edurbs.openfood.domain.exception.NegocioException;\r\nimport com.edurbs.openfood.domain.exception.PedidoNaoEncontradoException;\r\nimport com.edurbs.openfood.domain.model.FormaPagamento;\r\nimport com.edurbs.openfood.domain.model.Pedido;\r\nimport com.edurbs.openfood.domain.model.Produto;\r\nimport com.edurbs.openfood.domain.repository.PedidoRepository;\r\n\r\n@Service\r\npublic class CadastroPedidoService {\r\n    \r\n    @Autowired\r\n    private PedidoRepository pedidoRepository;\r\n\r\n    @Autowired\r\n    private CadastroProdutoService cadastroProdutoService;\r\n\r\n    @Autowired\r\n    private CadastroRestauranteService cadastroRestauranteService;\r\n\r\n    @Autowired\r\n    private CadastroCidadeService cadastroCidadeService;\r\n\r\n    @Autowired\r\n    private CadastroFormaPagamentoService cadastroFormaPagamentoService;\r\n\r\n    @Autowired\r\n    private CadastroUsuarioService cadastroUsuarioService;\r\n    \r\n\r\n    public List<Pedido> listar() {\r\n        return pedidoRepository.findAll();\r\n    }\r\n\r\n    public Pedido buscar(String codigoPedido) {        \r\n        return pedidoRepository.findByCodigo(codigoPedido)\r\n                .orElseThrow(() -> new PedidoNaoEncontradoException(codigoPedido));        \r\n    }\r\n\r\n    @Transactional\r\n    public Pedido salvar(Pedido pedido) {\r\n     \r\n        this.validaPedido(pedido);\r\n        this.validaItensPedido(pedido);\r\n\r\n        pedido.definirFrete();\r\n        pedido.calcularValorTotal(); // e subtotal também\r\n\r\n        var pedidoSalvo = pedidoRepository.save(pedido);\r\n\r\n        pedidoSalvo.atribuirPedidoAosItens();\r\n\r\n        return pedidoSalvo;\r\n    }\r\n\r\n    public void validaPedido(Pedido pedido) {\r\n        var clienteId = pedido.getCliente().getId();\r\n        var cliente = cadastroUsuarioService.buscar(clienteId);\r\n        pedido.setCliente(cliente);\r\n        \r\n        var restauranteId = pedido.getRestaurante().getId();\r\n        var restaurante = cadastroRestauranteService.buscar(restauranteId);\r\n        pedido.setRestaurante(restaurante);\r\n        \r\n        var formasPagamentoAceitas = restaurante.getFormasPagamento();\r\n        \r\n        var formaPagamentoId = pedido.getFormaPagamento().getId(); \r\n        var formaPagamento = cadastroFormaPagamentoService.buscar(formaPagamentoId);\r\n        pedido.setFormaPagamento(formaPagamento);\r\n        if(restauranteNaoAceitaFormaPagamento(formaPagamento, formasPagamentoAceitas)){\r\n            throw new NegocioException(String.format(\"Restaurante código %d não aceita forma de pagamento código %d\", restauranteId, formaPagamentoId));\r\n        }       \r\n\r\n        var cidadeId = pedido.getEnderecoEntrega().getCidade().getId();\r\n        var cidade = cadastroCidadeService.find(cidadeId);\r\n        pedido.getEnderecoEntrega().setCidade(cidade);\r\n    }\r\n\r\n    public void validaItensPedido(Pedido pedido){\r\n        var restaurante = pedido.getRestaurante();\r\n        var restauranteId= restaurante.getId();\r\n        var produtosDoRestaurante = restaurante.getProdutos();\r\n        var itens = pedido.getItens();\r\n\r\n        itens.forEach(item -> {\r\n            var produtoId = item.getProduto().getId();\r\n            var produto = cadastroProdutoService.buscar(produtoId);\r\n\r\n            if(restauranteNaoContemProduto(produto, produtosDoRestaurante)){\r\n                throw new NegocioException(String.format(\"Produto código %d não está cadastradado no restaurante código %d\", produtoId, restauranteId));\r\n            }\r\n\r\n            item.setProduto(produto);\r\n            item.setPrecoUnitario(produto.getPreco());\r\n            item.calcularPrecoTotal();\r\n            \r\n        });\r\n    }\r\n\r\n\r\n    public boolean restauranteNaoContemProduto(Produto produto, List<Produto> produtos) {       \r\n        return !produtos.contains(produto);\r\n    }\r\n\r\n    public boolean restauranteNaoAceitaFormaPagamento(FormaPagamento formaPagamento, Set<FormaPagamento> formasPagamentoAceitas){\r\n        return !formasPagamentoAceitas.contains(formaPagamento);\r\n    }\r\n\r\n\r\n}\r\n"
        }
    ]
}