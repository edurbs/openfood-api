{
    "sourceFile": "src/main/java/com/edurbs/openfood/api/controller/CidadeController.java",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1670361616099,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1670361616099,
            "name": "Commit-0",
            "content": "package com.edurbs.openfood.api.controller;\r\n\r\nimport java.util.List;\r\n\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.cache.annotation.CacheEvict;\r\nimport org.springframework.cache.annotation.CachePut;\r\nimport org.springframework.cache.annotation.Cacheable;\r\nimport org.springframework.cache.annotation.Caching;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageImpl;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.web.PageableDefault;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.web.bind.annotation.DeleteMapping;\r\nimport org.springframework.web.bind.annotation.GetMapping;\r\nimport org.springframework.web.bind.annotation.PathVariable;\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.PutMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.RequestMapping;\r\nimport org.springframework.web.bind.annotation.ResponseStatus;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\nimport com.edurbs.openfood.api.assembler.CidadeModelAssembler;\r\nimport com.edurbs.openfood.api.model.CidadeApiModel;\r\nimport com.edurbs.openfood.api.model.input.CidadeInput;\r\nimport com.edurbs.openfood.domain.exception.EntidadeNaoEncontradaException;\r\nimport com.edurbs.openfood.domain.exception.NegocioException;\r\nimport com.edurbs.openfood.domain.model.Cidade;\r\nimport com.edurbs.openfood.domain.repository.CidadeRepository;\r\nimport com.edurbs.openfood.domain.service.CadastroCidadeService;\r\n\r\nimport javax.validation.Valid;\r\n\r\n\r\n\r\n\r\n@RestController\r\n@RequestMapping(value=\"/cidades\", produces = \"application/json\")\r\npublic class CidadeController {\r\n\r\n    private static final String ID_MAPPING = \"/{id}\";\r\n\r\n    private static final String RESULT_ID = \"#result.id\";\r\n    private static final String ID_CACHE = \"#id\";\r\n    private static final String CITY = \"city\";\r\n    private static final String CITIES = \"cities\";\r\n\r\n    @Autowired\r\n    private CadastroCidadeService cadastroCidadeService;\r\n\r\n    @Autowired\r\n    private CidadeModelAssembler cidadeModelAssembler;\r\n\r\n    @Autowired \r\n    private CidadeRepository cidadeRepository;\r\n\r\n    @GetMapping\r\n    @Cacheable(cacheNames = CITIES, key = \"#pageable\")\r\n    public Page<CidadeApiModel> listCities( @PageableDefault Pageable pageable) {\r\n        Page<Cidade> cidadesPage = cidadeRepository.findAll(pageable);\r\n        List<Cidade> cidadesList = cidadesPage.getContent();\r\n        List<CidadeApiModel> cidadesApiModel = cidadeModelAssembler.toCollectionApiModel(cidadesList);\r\n\r\n        return new PageImpl<>(cidadesApiModel, pageable, cidadesPage.getTotalElements());\r\n    }\r\n\r\n    @GetMapping(ID_MAPPING)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    @Cacheable(cacheNames = CITY, key = ID_CACHE)\r\n    public CidadeApiModel getCity(@PathVariable Long id) {        \r\n             \r\n        var cidade = cadastroCidadeService.find(id);        \r\n\r\n        return cidadeModelAssembler.toApiModel(cidade);\r\n\r\n        // CacheControl cacheControl = CacheControl.maxAge(10, TimeUnit.SECONDS);\r\n        // return ResponseEntity.ok()\r\n        //         // .cacheControl(cacheControl)\r\n        //         .body(cidadeApiModel);\r\n    }\r\n\r\n    @PostMapping()\r\n    @ResponseStatus(HttpStatus.CREATED)    \r\n    @Caching(put = @CachePut(cacheNames = CITY, key=RESULT_ID),\r\n            evict = @CacheEvict(cacheNames = CITIES, allEntries = true))\r\n    public CidadeApiModel addCity(@RequestBody @Valid CidadeInput cidadeInput) {\r\n        try {\r\n            Cidade cidade = cidadeModelAssembler.toDomainModel(cidadeInput);\r\n            Cidade cidadeSalva =cadastroCidadeService.salvar(cidade);            \r\n            return cidadeModelAssembler.toApiModel(cidadeSalva);\r\n        } catch (EntidadeNaoEncontradaException e) {\r\n            throw new NegocioException(e.getMessage());\r\n        }\r\n    }\r\n\r\n    @PutMapping(ID_MAPPING)\r\n    @ResponseStatus(HttpStatus.OK)\r\n    @Caching(put = @CachePut(cacheNames = CITY, key=ID_CACHE),\r\n            evict = @CacheEvict(cacheNames = CITIES, allEntries = true))\r\n    public CidadeApiModel updateCity(@PathVariable Long id, @RequestBody @Valid CidadeInput cidadeInput) {\r\n        try {\r\n            cadastroCidadeService.find(id);        \r\n            Cidade cidade = cidadeModelAssembler.toDomainModel(cidadeInput);\r\n            cidade.setId(id);\r\n            \r\n            Cidade cidadesalva = cadastroCidadeService.salvar(cidade);            \r\n\r\n            return cidadeModelAssembler.toApiModel(cidadesalva);\r\n\r\n        } catch (EntidadeNaoEncontradaException e) {\r\n            throw new NegocioException(e.getMessage());\r\n        }\r\n        \r\n    }\r\n\r\n    @DeleteMapping(ID_MAPPING)\r\n    @Caching(evict = {\r\n        @CacheEvict(cacheNames = CITY, key = ID_CACHE),\r\n        @CacheEvict(cacheNames = CITIES, allEntries = true)\r\n    })\r\n    @ResponseStatus(HttpStatus.NO_CONTENT)\r\n    public void deleteCity(@PathVariable Long id){        \r\n        cadastroCidadeService.remover(id);    \r\n    }\r\n    \r\n    \r\n    \r\n}\r\n"
        }
    ]
}